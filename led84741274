/*
    This sketch establishes a TCP connection to a "quote of the day" service.
    It sends a "hello" message, and then prints received data.
*/

#include <ESP8266WiFi.h>
#include <ESP8266HTTPClient.h>

#ifndef STASSID
#define STASSID "WR7010-2.4G-9AE84"
#define STAPSK  "axxx76874"
#endif

const char* ssid     = STASSID;
const char* password = STAPSK;

const int SHORT_PRESS_TIME = 4888;
const int LONG_PRESS_TIME  = 4888;
int lastState = LOW;
int currentState;
unsigned long pressedTime  = 0;
unsigned long releasedTime = 0;

void setup() {
  Serial.begin(115200);

  // We start by connecting to a WiFi network

  Serial.println();
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  /* Explicitly set the ESP8266 to be a WiFi-client, otherwise, it by default,
     would try to act as both a client and an access-point and could cause
     network-issues with your other WiFi-devices on your WiFi-network. */
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());

pinMode(16, INPUT);

}

void loop() {

   // wait for WiFi connection
   if (WiFi.status() == WL_CONNECTED) {
       HTTPClient http;
       http.begin("http://154.127.52.52:8884/api8474.php"); //HTTP URL for hosted server(local server)
       //192.168.43.161 - HOST     PORT: 3000 and /api is the target api we need to hit to get response
       int httpCode = http.GET();
      // USE_SERIAL.println("After GET Request");
       // httpCode will be negative on error
       if(httpCode > 0) {
           if(httpCode == HTTP_CODE_OK) {
             //HTTP_CODE_OK means code == 200
               String payload = http.getString();// gives us the message received by the GET Request

           if(payload == "1")
           {
           pinMode(14, OUTPUT);
           digitalWrite(14,HIGH);
           pinMode(4, OUTPUT);
           digitalWrite(4,LOW);
           pinMode(5, OUTPUT);
           digitalWrite(5,LOW);
           pinMode(12, OUTPUT);
           digitalWrite(12,LOW);
           pinMode(13, OUTPUT);
           digitalWrite(13,LOW);
           }
           if(payload == "2")
           {          
           pinMode(5, OUTPUT);
           digitalWrite(5,HIGH);
           pinMode(14, OUTPUT);
           digitalWrite(14,HIGH);
           pinMode(4, OUTPUT);
           digitalWrite(4,LOW);
           pinMode(12, OUTPUT);
           digitalWrite(12,LOW);
           pinMode(13, OUTPUT);
           digitalWrite(13,LOW);
           }
           if(payload == "3")
           {          
           pinMode(5, OUTPUT);
           digitalWrite(5,HIGH);
           pinMode(4, OUTPUT);
           digitalWrite(4,HIGH);
           pinMode(14, OUTPUT);
           digitalWrite(14,HIGH);
           pinMode(12, OUTPUT);
           digitalWrite(12,LOW);
           pinMode(13, OUTPUT);
           digitalWrite(13,LOW);
           }
           if(payload == "4")
           {          
           pinMode(5, OUTPUT);
           digitalWrite(5,HIGH);
           pinMode(4, OUTPUT);
           digitalWrite(4,HIGH);
           pinMode(14, OUTPUT);
           digitalWrite(14,HIGH);
           pinMode(12, OUTPUT);
           digitalWrite(12,HIGH);
           pinMode(13, OUTPUT);
           digitalWrite(13,LOW);
           }
           if(payload == "5")
           {          
           pinMode(5, OUTPUT);
           digitalWrite(5,HIGH);
           pinMode(4, OUTPUT);
           digitalWrite(4,HIGH);
           pinMode(14, OUTPUT);
           digitalWrite(14,HIGH);
           pinMode(12, OUTPUT);
           digitalWrite(12,HIGH);
           pinMode(13, OUTPUT);
           digitalWrite(13,HIGH);
           }
           }
       } else {
       }
   }

int currentState = digitalRead(16);

  if(lastState == HIGH && currentState == LOW)        // button is pressed
    pressedTime = millis();
  else if(lastState == LOW && currentState == HIGH) { // button is released
    releasedTime = millis();

    long pressDuration = releasedTime - pressedTime;

    if( pressDuration < SHORT_PRESS_TIME )

{

if (WiFi.status() == WL_CONNECTED) { //Check WiFi connection status
 
HTTPClient http;  //Declare an object of class HTTPClient
 
http.begin("http://154.127.52.52:8884/linuxwork84.php");  //Specify request destination
int httpCode = http.GET();                                                                  //Send the request
 
if (httpCode > 0) { //Check the returning code
 
String payload = http.getString();   //Get the request response payload
Serial.println(payload);                  //Print the response payload
 
}

}

}

if( pressDuration > LONG_PRESS_TIME )

{

if (WiFi.status() == WL_CONNECTED) { //Check WiFi connection status
 
HTTPClient http;  //Declare an object of class HTTPClient
 
http.begin("http://154.127.52.52:8884/linuxwork8474.php");  //Specify request destination
int httpCode = http.GET();                                                                  //Send the request
 
if (httpCode > 0) { //Check the returning code
 
String payload = http.getString();   //Get the request response payload
Serial.println(payload);                  //Print the response payload
 
}

}

}

}

lastState = currentState;

}
